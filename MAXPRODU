import java.util.*;
import java.io.*;
import java.math.*;
import java.io.InputStream;

class  Solution{
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 25;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }
    
    static int N, K;
    static int[] arr;
    
    public static void main(String[] argh) throws Exception{
        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        int t= Integer.parseInt(br.readLine().trim());
        StringBuilder sb= new StringBuilder();
        BigInteger md= new BigInteger("1000000007");
        for(int tt=0; tt<t; tt++){
            String[] inpNM= br.readLine().trim().split(" ");
            N= Integer.parseInt(inpNM[0]);
            K= Integer.parseInt(inpNM[1]);
            long max= 1;
            
            // kSum is minimum possible sum of K positive integer
            long kSum= ((K+1)*K) >> 1;
            int fst= 1;
            int lst= K;
            
            // if minimum possible sum of K positive integer is greater than n
            // it is not possible to break N
            if(kSum > N){
                sb.append("-1");
                if(tt != t-1) sb.append("\n");
                continue;
            }
            
            long df= N-kSum;
            long vr= df/K;
            fst += vr;
            lst += vr;
            kSum += (vr*K);
            
            arr= new int[K];
            int c= 0;
            for(int i=fst; i<=lst; i++){
                arr[c++]= i;
            }
            
            long diff= N - kSum;
            for(int i=K-1; i>=0; i--){
                if(diff == 0) break;
                long re= diff / (long)(i+1);
                arr[i] += (re+1);
                diff -= (re+1);
            }

            BigInteger b= new BigInteger("1");
            BigInteger b1;
            BigInteger b2;
            for(int i=0; i<K; i++){
                b1= new BigInteger(arr[i]+"");
                b2= new BigInteger((arr[i]-1)+"");
                b= b.multiply(b1.multiply(b2));
                b= b.mod(md);
            }
            b= b.mod(md);
            sb.append(b);
            if(tt != t-1) sb.append("\n");
        }
        System.out.print(sb);
        
    }
    
    
}

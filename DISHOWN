/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef {
    
    static int[] ds, points, maxx;

	public static void main (String[] args) throws java.lang.Exception {
		// your code goes here
		
		Reader br = new Reader();
		BufferedWriter bw = new BufferedWriter(new PrintWriter(System.out));
		
		int T = br.nextInt();
		
		for(int t=0; t<T; t++) {
		    int N = br.nextInt();
		    ds      = new int[N];
		    points  = new int[N];
		    maxx    = new int[N];
		    
		    // taking dish points
		    for(int i=0; i<N; i++) {
		        points[i]   = br.nextInt();
		        ds[i]       = i;
		    }
		    
		    int Q = br.nextInt();
		    
		    for(int i=0; i<Q; i++) {
		        String[] inp = br.readLine().split(" ");
		        
		        if(Integer.parseInt(inp[0]) == 0) {
		            int x = Integer.parseInt(inp[1]);
		            int y = Integer.parseInt(inp[2]);
		            boolean flag = mergeElements(x-1, y-1);
		            if (flag == false) {
		                bw.write("Invalid query!\n");
		            }
		            
		        } else {
		            int x = Integer.parseInt(inp[1]);
		            findParent(x-1);
		            bw.write((ds[x-1] + 1) + "\n");
		        }
		    }
		}
		bw.flush();
		bw.close();
		
	}
	
	private static int findParent(int pos) {
	    if(ds[pos] == pos) return pos;
	    return ds[pos] = findParent(ds[pos]);
	}
	
	private static boolean mergeElements(int pos1, int pos2) {
	    
	    int p1 = findParent(pos1);
	    int p2 = findParent(pos2);
	    
	    if (p1 == p2) return false;
	    
	    int max1 = points[p1], max2 = points[p2];
	    
	    if (max1 == max2) return true;
	    int minM = max1 > max2 ? p2 : p1;
	    int maxM = max1 > max2 ? p1 : p2;
	   
	    ds[minM] = maxM;
	    return true;
	   
	}

	
	static class Reader { 
        final private int BUFFER_SIZE = 1 << 16; 
        private DataInputStream din; 
        private byte[] buffer; 
        private int bufferPointer, bytesRead; 
  
        public Reader() 
        { 
            din = new DataInputStream(System.in); 
            buffer = new byte[BUFFER_SIZE]; 
            bufferPointer = bytesRead = 0; 
        } 
  
        public Reader(String file_name) throws IOException 
        { 
            din = new DataInputStream(new FileInputStream(file_name)); 
            buffer = new byte[BUFFER_SIZE]; 
            bufferPointer = bytesRead = 0; 
        } 
  
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[64]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
  
        public int nextInt() throws IOException 
        { 
            int ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do
            { 
                ret = ret * 10 + c - '0'; 
            }  while ((c = read()) >= '0' && c <= '9'); 
  
            if (neg) 
                return -ret; 
            return ret; 
        }
        
        private void fillBuffer() throws IOException 
        { 
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); 
            if (bytesRead == -1) 
                buffer[0] = -1; 
        } 
  
        private byte read() throws IOException 
        { 
            if (bufferPointer == bytesRead) 
                fillBuffer(); 
            return buffer[bufferPointer++]; 
        } 
  
        public void close() throws IOException 
        { 
            if (din == null) 
                return; 
            din.close(); 
        } 
    }
}

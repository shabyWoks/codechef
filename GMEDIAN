import java.util.*;
import java.io.*;
import java.math.*;
import java.io.InputStream;

class  GMEDIAN{
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 25;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }
    
    static int[] arr;
    static long[][] pascal;
    public static void main(String[] argh) throws Exception{
        Reader br= new Reader();
        int T= br.nextInt();
        pascal= new long[1001][1001];
        pascal[0][0]= 1;
        for(int i=1; i<1001; i++){
            pascal[i][0]= 1;
            for(int j=1; j<=i; j++){
                pascal[i][j]= (pascal[i-1][j-1] + pascal[i-1][j])%mod;
            }
        }
        StringBuilder sb= new StringBuilder();
        for(int i=0; i<T; i++){
            int N= br.nextInt();
            arr= new int[2001];
            int[] var= new int[N];
            for(int j=0; j<N; j++){
                int k= br.nextInt();
                var[j]= k;
            }
            var= countSort(var, N);
            long result= fastExp(2, (long)(N-1));
            for(int x=0; x<=(N - 2); x++){
                for(int y=(N-2), z=x+1; y>=x; y--,z++){
                    if(var[x] != var[z]) continue;
                    result= (result+pascal[y][x])%mod;
                }
            }
            
            sb.append(result);
            if(i != T-1) sb.append("\n");
        }
        System.out.print(sb);
    }
    
    static long mod= 1000000007;
    private static long fastExp(long base, long exp){
        long result= 1;
        if(exp == 0) return result;
        while(exp > 0){
            if((exp&1) == 1){
                result= (result*base)%mod;
            }
            base= (base*base)%mod;
            exp /= 2;
        }
        return result%mod;
    }
    
    private static int[] countSort(int[] arr, int N){
        int[] freq= new int[2001];
        
        for(int i=0; i<N; i++){
            freq[arr[i]]= freq[arr[i]] + 1;
        }
        
        for(int i=1; i<=2000; i++){
            freq[i]= freq[i] + freq[i-1];
        }
        
        int[] newA= new int[N];
        for(int i=0; i<N; i++){
            newA[freq[arr[i]]-1]= arr[i];
            freq[arr[i]]= freq[arr[i]] - 1;
        }
        return newA;
    }
    
}

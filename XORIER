import java.util.*;
import java.io.*;
import java.math.*;
import java.io.InputStream;

class  Solution{
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 25;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }
    
    static int[] arr;
    public static void main(String[] argh) throws Exception{
        // BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        Reader br= new Reader();
        int t= br.nextInt();
        StringBuilder sb= new StringBuilder();
        for(int tt=0; tt<t; tt++){
            int N= br.nextInt();
            arr= new int[N];
            long[] freq= new long[1000001];
            long evenCount= 0;
            long oddCount= 0;
            for(int j=0; j<N; j++){
                arr[j]= br.nextInt();
                freq[arr[j]]= freq[arr[j]] + 1;
                if((arr[j]&1) != 1){
                    evenCount++;
                }
                else{
                    oddCount++;
                }
            }
            
            long evenTotal= (evenCount*(evenCount-1)) >> 1;
            long oddTotal= (oddCount*(oddCount-1)) >> 1;
            
            for(int i=1; i<1000001; i++){
                if((i&1) != 1){
                    evenTotal -= ((freq[i]*(freq[i]-1)) >> 1);
                }
                else{
                    oddTotal -= ((freq[i]*(freq[i]-1)) >> 1);
                }
            }
            
            for(int i=1; i<= 999998; i++){
                if((i&1) != 1){
                    if((i^(i+2)) <= 3){
                        evenTotal -= (freq[i]*freq[i+2]);
                    }
                }
                else{
                    if((i^(i+2)) <= 3){
                        oddTotal -= (freq[i]*freq[i+2]);
                    }
                }
            }
            sb.append(evenTotal+oddTotal);
            if(tt != t-1) sb.append("\n");
        }
        System.out.print(sb);
    }
    
    
}

/* package codechef; // don't place package name! */

import java.util.*;
import java.io.*;
import java.math.*;

class MRGSRT{
    
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 20;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }

    public static void main(String[] argh) throws Exception{
        Reader br = new Reader();
        int t= br.nextInt();
        StringBuilder sb= new StringBuilder();
        for(int tt=0; tt<t; tt++){
            int X= br.nextInt();
            int B= br.nextInt();
            long sum = 0;
            ArrayList<DISH> dish= new ArrayList<>();
            for(int i=0; i<B; i++){
                int x= br.nextInt() - 1;
                long y= br.nextLong();
                dish.add(new DISH(x, y));
                sum += y;
            }
            
            ArrayList<CLAN> clan= new ArrayList<>();
            int C= br.nextInt();
            for(int i=0; i<C; i++){
                int p= br.nextInt() - 1;
                long q= br.nextLong();
                long r= br.nextLong();
                clan.add(new CLAN(p, q, r));
            }
            BigInteger v= new BigInteger("1");
            
            long l= 1; 
            long h= sum+1;
            long mid;
            long fin= Long.MAX_VALUE;
            while(l <= h){
                mid= (l+h) >> 1;
                long vv= mid;
                boolean found= true;
                int i=0, j=0;
                while(dish.size() != i){
                    DISH d= dish.get(i);
                    CLAN c= null;
                    if(clan.size() != j) c= clan.get(j);
                    if(c != null){
                        if(c.pos < d.pos){
                            if(c.req <= vv){
                                vv += c.pop;
                                j++;
                            }
                            else{
                                j++;
                            }
                        }
                        else{
                            if(d.req < vv){
                                vv-= d.req;
                                i++;
                            }
                            else{
                                found= false;
                                break;
                            }
                        }
                    }
                    else{
                        if(d.req < vv){
                            vv-= d.req;
                            i++;
                        }
                        else{
                            found= false;
                            break;
                        }
                    }
                    
                }
                if(found == true){
                    if(fin > mid)fin= mid;
                    h= mid - 1;
                }
                else{
                    l= mid + 1;
                }
                
            }
            sb.append(fin);
            if(tt != t-1) sb.append("\n");
        }
        System.out.print(sb);
    }
    
    private static class DISH{
        int pos;
        long req;
        public DISH(int pos, long req){
            this.pos= pos;
            this.req= req;
        }
    }
    
    private static class CLAN{
        int pos;
        long req;
        long pop;
        public CLAN(int pos, long req, long pop){
            this.pos= pos;
            this.req= req;
            this.pop= pop;
        }
    }
}

import java.util.*;
import java.io.*;
import java.math.*;
import java.io.InputStream;

class  Solution{
    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 25;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[1280000]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
    }
    static HashMap<Long, Long> map;
    static long min;
    static long minCount;
    public static void main(String[] argh) throws Exception{
        Reader br= new Reader();
        int t= br.nextInt();
        for(int q= 0; q<t; q++){
            long n= br.nextLong();
            long d= br.nextLong();
            min= Long.MAX_VALUE;
            minCount= Long.MAX_VALUE;
            map= new HashMap<>();
            findMin(n, 0, d);
            System.out.println(min + " " + minCount);
        }
    }
    
    private static void findMin(long num, long count, long d){
        long num1= num;
        long c= 0;
        if(num1 > 9){
            c++;
            num1= digitSum(num1);
        }
        if(!map.containsKey(num1)){
            map.put(num1, count + c);
            if(min > num1) {
                min= num1;
                minCount= count + c;
            }
            else if(min == num1){
                if(minCount > (count+c)){
                    minCount= count + c;
                }
            }
            
            findMin(num+d, count+1, d);
            // findMin(num1+d, count + c + 1, d);
            findMin(num1, count+c, d);
            map.remove(num1);
        }
    }
    
    private static long digitSum(long num){
        long result= 0;
        while(num>0){
            long d= num%10;
            result += d;
            num /= 10;
        }
        return result;
    }
}
